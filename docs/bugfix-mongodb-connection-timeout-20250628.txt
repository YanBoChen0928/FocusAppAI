Fix: MongoDB connection timeout causing API failures in production

## Problem Analysis
- Production deployment experiencing "hn" errors (compressed variable names)
- Root cause: MongoDB listCollections() operation failing due to unstable connection
- Frontend receiving timeout errors: "timeout of 10000ms exceeded"
- Error chain: MongoDB connection issues → API response delays → Frontend timeout

## Root Cause
The original MongoDB connection logic executed `db.listCollections()` immediately after 
connection establishment, without ensuring the connection was fully ready. In production 
environments with network latency, this caused the operation to fail intermittently.

## Solution Implemented
1. **Connection State Verification**: Added readyState check before proceeding with operations
2. **Retry Mechanism**: Implemented 3-attempt retry for listCollections() and indexes() operations
3. **Error Isolation**: Ensured index operation failures don't block server startup
4. **Graceful Degradation**: Server starts even if MongoDB operations fail
5. **Enhanced Logging**: Added detailed connection status and error tracking

## Technical Changes
### Modified Files:
- `focus-app/server/server.js` - Enhanced MongoDB connection logic

### Key Improvements:
- Wait for mongoose.connection.readyState === 1 before operations
- Retry mechanism with 2-second delays between attempts
- Individual error handling for each index operation
- Fallback server startup if MongoDB connection fails
- Enhanced connection status logging

## Impact
- Resolves production API timeout issues
- Improves deployment reliability
- Maintains backward compatibility
- Better error visibility for debugging

## Testing
- Local development: No impact on existing functionality
- Production: Should resolve "hn" timeout errors
- Fallback: Server still starts if MongoDB has issues

## Related Issues
- Frontend "hn" errors (compressed AxiosError objects)
- ECONNABORTED timeout errors
- API endpoint failures during peak usage 